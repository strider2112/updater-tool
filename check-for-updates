#!/bin/bash

# Required to resolve symbolic links to the relative directory of the script.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [ "$DIR" = "/usr/local/bin" ]; then
	DATAPATH="/usr/local/share/updater-tool"
else
	DATAPATH="$DIR"
fi

holderFile="$DATAPATH/data/updates.txt"
aptCheckFile="/usr/lib/update-notifier/apt-check"
zeroUpdateFile="$DATAPATH/data/zeroUpdates.txt"

# Check for dependancies
dependant() {
	if [ ! -f "$aptCheckFile" ]; then
		printf "You don't have apt-check installed, run \033[01;32msudo apt install update-notifier\033[00m\n\n"
		exit 1
	fi
	if [ ! -x "$(command -v python)" ]; then
		printf "You don't have python installed, run \033[01;32msudo apt install python\033[00m\n\n"
		exit 1
	fi
}

zeroUpdates() {
	printf "0 packages can be updated.\n0 updates are security updates.\n" >"$zeroUpdateFile"
}

# check if update.txt exists, if it doesn't, create it
checks() {
	if [ ! -f "$holderFile" ]; then
		if ! touch "$holderFile"; then
			echo "Unable to read/write file. Did you run install.sh?"
			exit 1
		else
			chmod +rw "$holderFile"
		fi
	fi
	if [ ! -f "$zeroUpdateFile" ]; then
		if ! touch "$zeroUpdateFile"; then
			echo "Unable to read/write file. Did you run install.sh?"
			exit 1
		else
			chmod +rw "$zeroUpdateFile"
			zeroUpdates
		fi
	fi
}

# check for updates using apt-check
updateCheck() {
	if $aptCheckFile --human-readable >"$holderFile"; then
		if [ ! "$(cat $zeroUpdateFile)" = "$(cat $holderFile)" ]; then
			printf "\nIf you want to update, run \033[01;32mupdater\n\033[00m" >>"$holderFile"
		fi
		exit 1
	else
		echo "apt update check failed"
		exit 1
	fi
}


main() {
	dependant
	# checks
	updateCheck
}

main
